<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pomoc - Komunikacja z bazą danych i wysyłanie e-maili</title>
    <link rel="stylesheet" href="/css/help.css" />
  </head>
  <body>

    {{> navbar }}

    <div class="help">
      <div class="help-body">
        <div class="help-header">
          <h1>Obsługa poczty e-mail</h1>
          <h2>Biblioteki i usługi pozwalające na wysyłanie wiadomości e-mail w
            node.js</h2>
        </div>

        <ol class="help-list">
          <li>
            <h3>1. Komunikacja z Bazą Danych MySQL</h3>

            <h4>Typ i specyfika aplikacji Node.js</h4>
            <p>Moduł
              <code>mysql2</code>
              wykorzystywany jest do komunikacji z bazą danych MySQL. Pozwala na
              budowę kodu w sposób asynchroniczny, co pozwala na efektywne
              przetwarzanie żądań i dużą wydajność, nawet przy dużej liczbie
              jednoczesnych połączeń.</p>

            <h4>Wymagania</h4>
            <ul>
              <li>Zainstalowany Node.js oraz npm.</li>
              <li>Zainstalowany moduł
                <code>mysql2</code>
                (komenda:
                <code>npm install mysql2</code>).</li>
              <li>Aktywna baza danych MySQL z dostępem do hosta, loginu, hasła
                oraz nazwy bazy danych.</li>
            </ul>

            <h4>Dostępne Metody</h4>
            <p>Moduł
              <code>mysql2</code>
              dostarcza kilku podstawowych metod do zarządzania bazą danych,
              takich jak:</p>

            <table>
              <tr>
                <th>Metoda</th>
                <th>Opis</th>
              </tr>
              <tr>
                <td><code>createConnection()</code></td>
                <td>Tworzy nowe połączenie z bazą danych.</td>
              </tr>
              <tr>
                <td><code>query()</code></td>
                <td>Wykonuje zapytanie SQL.</td>
              </tr>
              <tr>
                <td><code>execute()</code></td>
                <td>Umożliwia bezpieczne wykonanie zapytań z parametrami, co
                  pozwala zapobiec atakom SQL Injection.</td>
              </tr>
            </table>

                <h4>Zalety</h4>
                <ul class="plusy">
                  <li>Efektywność oraz możliwość asynchronicznej pracy.</li>
                  <li>sparcie dla obiektów Promise.</li>
                  <li>SSL i mechanizmy przełączania uwierzytelniania.</li>
                </ul>

                <h4>Wady</h4>
                <ul class="minusy">
                  <li>Wymagana jest znajomość SQL oraz bieżące zarządzanie połączeniami.</li>
                </ul>

            <h4>Przykład kodu:</h4>
            <pre><code>
// Importowanie modułu mysql2
const mysql = require('mysql2');

// Tworzenie połączenia
const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'database_name'
});

// Wykonanie zapytania
connection.query('SELECT * FROM users', (error, results) => {
    if (error) throw error;
    console.log(results);
});

// Zamknięcie połączenia
connection.end();
              </code></pre>
          </li>

          <li>
            <h3>2. Wysyłanie Wiadomości E-mail</h3>

            <h4>Typ i specyfika aplikacji Node.js</h4>
            <p>Aplikacje Node.js korzystają z różnych bibliotek i usług do
              wysyłania wiadomości e-mail. Oto omówienie trzech popularnych
              rozwiązań:
              <code>nodemailer</code>,
              <code>SendGrid</code>
              oraz
              <code>Mailgun</code>.</p>

            <ol type="a">
              <li>
                <h4>a) Nodemailer</h4>
                <p>Moduł
                  <code>nodemailer</code>
                  jest łatwy w użyciu i oferuje elastyczność dzięki wsparciu dla protokołu SMTP oraz OAuth2.</p>

                <h4>Wymagania</h4>
                <ul>
                  <li>Zainstalowany Node i npm.</li>
                  <li>Pobrany moduł
                    <code>nodemailer</code>
                    (komenda:
                    <code>npm install nodemailer</code>).</li>
                </ul>

            <h4>Dostępne Metody</h4>
            <p>Moduł
              <code>nodemailer</code>
              pozwala na zarządzanie mail'ami dzięki poniższym metodom:</p>

              <table>
                <tr>
                  <th>Metoda</th>
                  <th>Opis</th>
                </tr>
                <tr>
                  <td><code>createTransport()</code></td>
                  <td>Konfiguruje transport SMTP z użyciem parametrów takich jak host, port, nazwa użytkownika i hasło.</td>
                </tr>
                <tr>
                  <td><code>sendMail()</code></td>
                  <td>Wysyła wiadomość e-mail z podanymi parametrami (adresy, temat, treść, załączniki).</td>
                </tr>
              </table>


                <h4>Zalety</h4>
                <ul class="plusy">
                  <li>Prosta konfiguracja.</li>
                  <li>Wsparcie dla różnych dostawców SMTP.</li>
                </ul>

                <h4>Wady</h4>
                <ul class="minusy">
                  <li>Brak funkcji monitorowania dostarczalności.</li>
                  <li>Problemy z limitem wysyłki w przypadku darmowych kont
                    SMTP.</li>
                </ul>
                <h4>Przykład kodu:</h4>
                                    <pre><code>
// Importowanie modułu nodemailer
const nodemailer = require('nodemailer');

// Konfiguracja transportu SMTP
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'twojemail@gmail.com',
        pass: 'twojehaslo'
    }
});

// Parametry wiadomości e-mail
const mailOptions = {
    from: 'twojemail@gmail.com',
    to: 'odbiorca@gmail.com',
    subject: 'Test',
    text: 'To jest testowy e-mail z aplikacji Node.js'
};

// Wysyłanie wiadomości
transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        console.error('Błąd:', error);
    } else {
        console.log('E-mail wysłany:', info.response);
    }
});
                    </code></pre>
              </li>

              <li>
                <h4>b) SendGrid</h4>
                <p>SendGrid to popularna usługa e-mail w chmurze, oferująca
                  łatwą integrację z API oraz zaawansowane funkcje
                  monitorowania.</p>

              <h4>Wymagania</h4>
              <ul>
                <li>Rejestracja na platformie SendGrid.</li>
                <li>Zainstalowany moduł
                  <code>@sendgrid/mail</code>
                  (komenda:
                  <code>npm install @sendgrid/mai</code>).</li>
                <li>Klucz API wygenerowany w SendGrid.</li>
              </ul>

            <h4>Dostępne Metody</h4>
            <p>Moduł
              <code>SendGrid</code>
              obsługa email opiera się na podanych metodach:  
            </p>

            <table>
              <tr>
                <th>Metoda</th>
                <th>Opis</th>
              </tr>
              <tr>
                <td><code>setApiKey()</code></td>
                <td>Ustawia klucz API wymagany do uwierzytelnienia z usługą SendGrid.</td>
              </tr>
              <tr>
                <td><code>send()</code></td>
                <td>Wysyła wiadomość e-mail z podanymi parametrami (adresy, temat, treść).</td>
              </tr>
            </table>


                <h4>Zalety</h4>
                <ul class="plusy">
                  <li>Prosty w użyciu interfejs API.</li>
                  <li>Zaawansowane raportowanie i monitorowanie.</li>
                </ul>

                <h4>Wady</h4>
                <ul class="minusy">
                  <li>Bezpłatne konto ma ograniczone możliwości.</li>
                  <li>Zależność od zewnętrznego dostawcy.</li>
                </ul>

                <h4>Przykład kodu:</h4>
                <pre><code>
// Importowanie modułu @sendgrid/mail
const sgMail = require('@sendgrid/mail');

// Ustawienie klucza API
sgMail.setApiKey('YOUR_SENDGRID_API_KEY');

// Konfiguracja wiadomości e-mail
const msg = {
    to: 'odbiorca@gmail.com',
    from: 'noreply@example.com',
    subject: 'Test SendGrid',
    text: 'Wiadomość wysłana za pomocą SendGrid.'
};

// Wysyłanie wiadomości
sgMail.send(msg)
    .then(() => console.log('E-mail wysłany'))
    .catch((error) => console.error(error));
                  </code></pre>
              </li>

              <li>
                <h4>c) Mailgun</h4>
                <p>Mailgun to usługa e-mail w chmurze oferująca API do wysyłania
                  wiadomości z możliwością zaawansowanego śledzenia oraz
                  integracji.</p>

                <h4>Wymagania</h4>
                <ul>
                  <li>Rejestracja na platformie Mailgun.</li>
                  <li>Klucz API wygenerowany w Mailgun.</li>
                  <li>Moduł
                    <code>mailgun-js</code>
                    (instalacja:
                    <code>npm install mailgun-js</code>).</li>
                </ul>

            <h4>Dostępne Metody</h4>
            <p>Moduł
              <code>Mailgun</code>
              dostarcza nam niżej podane metody do obsługi emaili.
            </p>

            <table>
              <tr>
                <th>Metoda</th>
                <th>Opis</th>
              </tr>
              <tr>
                <td><code>mailgun()</code></td>
                <td>Tworzy instancję klienta z konfiguracją API Key i domeny Mailgun.</td>
              </tr>
              <tr>
                <td><code>messages().send()</code></td>
                <td>Wysyła wiadomość e-mail z podanymi parametrami (adresy, temat, treść, załączniki).</td>
              </tr>
            </table>


                <h4>Zalety</h4>
                <ul class="plusy">
                  <li>Zaawansowane funkcje analityczne.</li>
                  <li>Wsparcie dla dużych wolumenów wysyłki.</li>
                </ul>

                <h4>Wady</h4>
                <ul class="minusy">
                  <li>Wymaga konfiguracji rekordów DNS (SPF, DKIM).</li>
                  <li>Koszty mogą wzrastać przy dużej liczbie e-maili.</li>
                </ul>

                <h4>Przykład kodu:</h4>
                <pre><code>
// Importowanie modułu mailgun-js
const mailgun = require('mailgun-js');

// Konfiguracja Mailgun
const mg = mailgun({
    apiKey: 'YOUR_MAILGUN_API_KEY',
    domain: 'YOUR_DOMAIN'
});

// Konfiguracja wiadomości e-mail
const data = {
    from: 'noreply@example.com',
    to: 'odbiorca@gmail.com',
    subject: 'Test Mailgun',
    text: 'Wiadomość wysłana za pomocą Mailgun.'
};

// Wysyłanie wiadomości
mg.messages().send(data, (error, body) => {
    if (error) {
        console.error(error);
    } else {
        console.log(body);
    }
});

                  </code></pre>
              </li>
            </ol>
          </li>

        </ol>
      </div>
    </div>

  </body>
</html>